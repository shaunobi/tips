Use `git checkout 1234567` to go back to a previous snapshot

Use `git revert 1234567` to "undo" the named commit
	Note that this is safe - it creates a NEW revision with the changes UNDONE
	So, history after would be: Create index.html, Revert "Create index.html"

Use `git checkout master` to go back to the master branch

Use `git log --online` and `git status` to see history and status

Use `git tab -a v1.x -m "message"` to create an annotated tag

Use `git checkout v1.x` to checkout out a tagged snapshot (often a release)

I like to use `alias c=clear` so I can say `c;git status` on the terminal

To clean out changes to tracked files: `git reset --hard`
	Important: this will ONLY get rid of changes to tracked files, not untracked
	To get rid of untracked files: `git clean -f`
	Very important to be careful with these two commands
	They operate on the working directory, not committed snapshots

Use `git branch -d branch_name` to clean up branches
	This is usually done after a branch is merged, but can be done to just delete
	If deleting an unmerged branch, you'll get a warning with instructions; safe

Use `git rebase master` to rebase your current branch off the tip of master
	Use `git rebase -i branchname` to do this interactively
	During interactive rebasing, you can fix commits, squash them, etc.

Use `git commit --amend` to add staged changes to last commit, not make new one

Use `git rebase --continue` to continue a rebase after amending a commit

Use `git rebase --abort` to abandon rebase and return to previous repo state
	This is your "panic button"

Use `git merge --no-ff branchname` to do a manual merge and NOT fast-forward

Use `git reflog` to show chronological history of the repo

Use `git reset --mixed HEAD~1` to move HEAD back 1 commit (could use other num)
	Will leave working directory alone (useful for things like splitting commits)

git reset --hard HEAD~1 moves HEAD back 1 commit, changes working dir

git log <since>..<until> displays commits reachable from <until> but not <since>

git log --stat shows extra information about altered files

git clone ../other-repo will clone another repo. Can obvs be over SSH as well

git remote add <remote-name> <path> will add new a remote

git fetch <remote-name> will pull down remote branch info, but not merge

git merge remote-repo/remote-branch to merge remote branch -> checked out branch

git branch -r to list remote branches

git push <remote-name> <branch-name> to push remote
	So, commonly: git push origin master
	Or: git push as a shorthand

git push <remote-name> <tag-name> to push a tag to another repo
	Interestingly, tags are NOT pushed by default

Interesting note: github.com/shaunobi/myrepo.git is a folder
	I thought the .git was a FILENAME, but it's the folder name convention
	When you git init --bare, you need a way to "know" it's a git folder

Use `git checkout -b branch-name` to create a branch and check it out

Important rule: NEVER rebase commits that have been pushed to a shared repo!
	Instead, use `git revert` to make a NEW commit with the changes

Very typical ways to check for "changes not in my master" and vice-versa:
	git log master..origin/master --stat (changes in origin/master not in master)
	git log origin/master..origin --stat (changes in master not in origin/master)
	Extremely useful commands after a git fetch origin

If you want to see a diff, you can easily use git diff <old>..<new>.  Examples:
	git diff master..craigb/new-feature
	git diff HEAD~2..HEAD~1
	git diff HEAD^^..HEAD^
	git diff (to see unstaged changes)

If you want to diff unstaged changes against the index, use `git diff`
	To see changes between unstaged and last commit, use `git diff --cached`

Use `git format-patch master` to create a .patch file
	Note that you need to be on the feature-branch, and state the target branch
	On other end, apply using `git am < 0001-Feature.patch`
	Once done, you can clear patch files out using `git clean -f`

